// config for preprocessing workflow

params {

  // help message
  help = ''

  // input directory
  input_dir = ""

  // filetype fastq or bam
  filetype = 'fastq'

  // glob pattern for input files
  pattern = '*_R{1,2}.fastq.gz'

  // output directory
  output_dir = ""

  // unmix myco 'yes' or 'no'
  unmix_myco = 'no'

  // principal species in each sample, assuming genus Mycobacterium, default null
  // otherwise takes 1 of 10 values: abscessus, africanum, avium, bovis, chelonae, chimaera, fortuitum, intracellulare, kansasii, tuberculosis
  species = 'null'

  // path to kraken2 database
  kraken_db = ""

  // path to bowtie2 index
  bowtie2_index = ""

  // name of the bowtie index, e.g. hg19_1kgmaj
  bowtie_index_name = "hg19_1kgmaj"
}

profiles {
  singularity {

    singularity.enabled = 'true'
    singularity.autoMounts = 'true'

    // path to the singularity containers
    params.sif_dir = "/home/amorris/BioInf/tb-pipeline/singularity"

    process {

      withName:checkBamValidity {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:checkFqValidity {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:bam2fastq {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:countReads {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:fastp {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:fastQC {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:kraken2 {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:mykrobe {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:bowtie2 {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:identifyBacterialContaminants {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:downloadContamGenomes {
        // disable strict error checking to allow for non-matching lines in linktestlog.txt
        container = "${params.sif_dir}/preprocessing.sif"
        shell = ['/bin/bash','-u']
      }

      withName:mapToContamFa {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:reKraken {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:reMykrobe {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:summarise {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:alignToRef {
        container = "${params.sif_dir}/clockwork.sif"
      }

      withName:callVarsMpileup {
        container = "${params.sif_dir}/clockwork.sif"
      }

      withName:callVarsCortex {
        container = "${params.sif_dir}/clockwork.sif"
      }

      withName:minos {
        container = "${params.sif_dir}/clockwork.sif"
      }

      withName:gvcf {
        container = "${params.sif_dir}/clockwork.sif"
      }
    }
  }

  sp3 {

    singularity.enabled = 'true'
    singularity.autoMounts = 'true'

    // path to the singularity containers
    params.sif_dir = "/data/images"

    process {
      scratch = true
      errorStrategy = 'ignore'

      withName:checkBamValidity {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:checkFqValidity {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:bam2fastq {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:countReads {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:fastp {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:fastQC {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:kraken2 {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:mykrobe {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:bowtie2 {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:identifyBacterialContaminants {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:downloadContamGenomes {
        // disable strict error checking to allow for non-matching lines in linktestlog.txt
        container = "${params.sif_dir}/preprocessing.sif"
        shell = ['/bin/bash','-u']
      }

      withName:mapToContamFa {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:reKraken {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:reMykrobe {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:summarise {
        container = "${params.sif_dir}/preprocessing.sif"
      }

      withName:alignToRef {
        container = "${params.sif_dir}/clockwork.sif"
      }

      withName:callVarsMpileup {
        container = "${params.sif_dir}/clockwork.sif"
      }

      withName:callVarsCortex {
        container = "${params.sif_dir}/clockwork.sif"
      }

      withName:minos {
        container = "${params.sif_dir}/clockwork.sif"
      }

      withName:gvcf {
        container = "${params.sif_dir}/clockwork.sif"
      }
    }
  }


  docker {

    docker.enabled = true
    fixOwnership = true
    runOptions = "-u \$(id -u):\$(id -g)"

    // define containers for each process
    process {

      withName:checkBamValidity {
        container = "annacprice/preprocessing:latest"
      }

      withName:checkFqValidity {
        container = "annacprice/preprocessing:latest"
      }

      withName:bam2fastq {
        container = "annacprice/preprocessing:latest"
      }

      withName:countReads {
        container = "annacprice/preprocessing:latest"
      }

      withName:fastp {
        container = "annacprice/preprocessing:latest"
      }

      withName:fastQC {
        container = "annacprice/preprocessing:latest"
      }

      withName:kraken2 {
        container = "annacprice/preprocessing:latest"
      }

      withName:mykrobe {
        container = "annacprice/preprocessing:latest"
      }

      withName:bowtie2 {
        container = "annacprice/preprocessing:latest"
      }

      withName:identifyBacterialContaminants {
        container = "annacprice/preprocessing:latest"
      }

      withName:downloadContamGenomes {
        // disable strict error checking to allow for non-matching lines in linktestlog.txt
        container = "annacprice/preprocessing:latest"
        shell = ['/bin/bash','-u']
      }

      withName:mapToContamFa {
        container = "annacprice/preprocessing:latest"
      }

      withName:reKraken {
        container = "annacprice/preprocessing:latest"
      }

      withName:reMykrobe {
        container = "annacprice/preprocessing:latest"
      }

      withName:summarise {
        container = "annacprice/preprocessing:latest"
      }

       withName:alignToRef {
        container = "annacprice/clockwork:latest"
      }

      withName:callVarsMpileup {
        container = "annacprice/clockwork:latest"
      }

      withName:callVarsCortex {
        container = "annacprice/clockwork:latest"
      }

      withName:minos {
        container = "annacprice/clockwork:latest"
      }

      withName:gvcf {
        container = "annacprice/clockwork:latest"
      }
    }
  }
}
